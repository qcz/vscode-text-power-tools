{
	"name": "text-power-tools",
	"displayName": "Text Power Tools",
	"description": "All-in-one solution with 190+ commands for text manipulation: filter lines (grep), remove lines, insert number sequences and GUIDs, sorting, change case, converting numbers, generating fake data and more. Great for finding information in logs.",
	"keywords": [
		"text",
		"tools",
		"logs",
		"grep",
		"utilities",
		"filter",
		"filtering",
		"filter text",
		"filter lines",
		"case",
		"TextFX",
		"Text Pastry",
		"pastry",
		"converter",
		"converting",
		"lorem",
		"ipsum",
		"lorem ipsum",
		"base64",
		"urlencode",
		"html entities",
		"xml entities",
		"zalgo",
		"clipboard",
		"faker",
		"fake data",
		"test data",
		"sort",
		"sorting",
		"json",
		"clipboard",
		"regex",
		"regexp",
		"regular expression",
		"regular expressions",
		"trim",
		"unicode"
	],
	"version": "1.40.1",
	"publisher": "qcz",
	"private": true,
	"engines": {
		"vscode": "^1.50.0"
	},
	"license": "SEE LICENSE IN LICENSE.md",
	"icon": "images/icon.png",
	"repository": {
		"type": "git",
		"url": "https://github.com/qcz/vscode-text-power-tools.git"
	},
	"bugs": {
		"url": "https://github.com/qcz/vscode-text-power-tools/issues"
	},
	"categories": [
		"Other"
	],
	"galleryBanner": {
		"color": "#1e415e",
		"theme": "dark"
	},
	"capabilities": {
		"untrustedWorkspaces": {
			"supported": true
		}
	},
	"activationEvents": [
		"onCommand:textPowerTools.filterLinesIncludingString",
		"onCommand:textPowerTools.filterLinesIncludingStringToNewEditor",
		"onCommand:textPowerTools.copyLinesIncludingStringToClipboard",
		"onCommand:textPowerTools.cutLinesIncludingStringToClipboard",
		"onCommand:textPowerTools.filterLinesMatchingRegex",
		"onCommand:textPowerTools.filterLinesMatchingRegexToNewEditor",
		"onCommand:textPowerTools.copyLinesMatchingRegexToClipboard",
		"onCommand:textPowerTools.cutLinesMatchingRegexToClipboard",
		"onCommand:textPowerTools.filterLinesIncludingSelection",
		"onCommand:textPowerTools.filterLinesIncludingSelectionToNewEditor",
		"onCommand:textPowerTools.filterLinesNotIncludingString",
		"onCommand:textPowerTools.filterLinesNotIncludingStringToNewEditor",
		"onCommand:textPowerTools.copyLinesNotIncludingStringToClipboard",
		"onCommand:textPowerTools.cutLinesNotIncludingStringToClipboard",
		"onCommand:textPowerTools.filterLinesNotMatchingRegex",
		"onCommand:textPowerTools.filterLinesNotMatchingRegexToNewEditor",
		"onCommand:textPowerTools.copyLinesNotMatchingRegexToClipboard",
		"onCommand:textPowerTools.cutLinesNotMatchingRegexToClipboard",
		"onCommand:textPowerTools.filterLinesNotIncludingSelection",
		"onCommand:textPowerTools.filterLinesNotIncludingSelectionToNewEditor",
		"onCommand:textPowerTools.extractInformation",
		"onCommand:textPowerTools.extractInformationToNewEditor",
		"onCommand:textPowerTools.countOccurrences",
		"onCommand:textPowerTools.countOccurrencesToNewEditor",
		"onCommand:textPowerTools.padStart",
		"onCommand:textPowerTools.padStartWithCustomString",
		"onCommand:textPowerTools.padEnd",
		"onCommand:textPowerTools.padEndWithCustomString",
		"onCommand:textPowerTools.appendPrefixToAllLines",
		"onCommand:textPowerTools.appendSuffixToAllLines",
		"onCommand:textPowerTools.wrapAllLinesWithTextSame",
		"onCommand:textPowerTools.wrapAllLinesWithTextDifferent",
		"onCommand:textPowerTools.separateWordsWithSpaces",
		"onCommand:textPowerTools.separateWordsWithForwardSlashes",
		"onCommand:textPowerTools.separateWordsWithBackslashes",
		"onCommand:textPowerTools.trimStart",
		"onCommand:textPowerTools.trim",
		"onCommand:textPowerTools.formatContentAsTableByTabulator",
		"onCommand:textPowerTools.formatContentAsTableBySemicolon",
		"onCommand:textPowerTools.formatContentAsTableByComma",
		"onCommand:textPowerTools.formatContentAsTableByPipe",
		"onCommand:textPowerTools.formatContentAsTableByCustomCharacter",
		"onCommand:textPowerTools.formatContentAsTableBySemicolonWithPadding",
		"onCommand:textPowerTools.formatContentAsTableByPipeWithPadding",
		"onCommand:textPowerTools.formatContentAsTableByCustomCharacterWithPadding",
		"onCommand:textPowerTools.changeCaseToCamelCase",
		"onCommand:textPowerTools.changeCaseToPascalCase",
		"onCommand:textPowerTools.changeCaseToSnakeCase",
		"onCommand:textPowerTools.changeCaseToDashCase",
		"onCommand:textPowerTools.changeCaseToConstantCase",
		"onCommand:textPowerTools.changeCaseToDotCase",
		"onCommand:textPowerTools.changeCaseToTitleCase",
		"onCommand:textPowerTools.changeCaseToSpongeCase",
		"onCommand:textPowerTools.changeCaseToSwapCase",
		"onCommand:textPowerTools.latinize",
		"onCommand:textPowerTools.slugify",
		"onCommand:textPowerTools.unicodeNormalizationNFC",
		"onCommand:textPowerTools.unicodeNormalizationNFD",
		"onCommand:textPowerTools.unicodeNormalizationNFKC",
		"onCommand:textPowerTools.unicodeNormalizationNFKD",
		"onCommand:textPowerTools.caseSensitiveSortAscending",
		"onCommand:textPowerTools.caseSensitiveSortDescending",
		"onCommand:textPowerTools.caseSensitiveSortAscendingAtColumn",
		"onCommand:textPowerTools.caseSensitiveSortDescendingAtColumn",
		"onCommand:textPowerTools.caseInsensitiveSortAscendingAtColumn",
		"onCommand:textPowerTools.caseInsensitiveSortDescendingAtColumn",
		"onCommand:textPowerTools.sortByLengthCaseSensitiveAscending",
		"onCommand:textPowerTools.sortByLengthCaseSensitiveDescending",
		"onCommand:textPowerTools.sortByLengthCaseInsensitiveAscending",
		"onCommand:textPowerTools.sortByLengthCaseInsensitiveDescending",
		"onCommand:textPowerTools.sortByWordCountAscending",
		"onCommand:textPowerTools.sortByWordCountDescending",
		"onCommand:textPowerTools.sortByGraphemeCountAscending",
		"onCommand:textPowerTools.sortByGraphemeCountDescending",
		"onCommand:textPowerTools.semverSortAscending",
		"onCommand:textPowerTools.semverSortDescending",
		"onCommand:textPowerTools.ipAddressSortAscending",
		"onCommand:textPowerTools.ipAddressSortDescending",
		"onCommand:textPowerTools.shuffleLines",
		"onCommand:textPowerTools.reverseLines",
		"onCommand:textPowerTools.generateRandomFromUserInput",
		"onCommand:textPowerTools.generateRandomDecimalNumbersFromRange",
		"onCommand:textPowerTools.generateRandomHexadecimalNumbersFromRange",
		"onCommand:textPowerTools.generateRandomRealNumbersFromRange",
		"onCommand:textPowerTools.generateFakeData",
		"onCommand:textPowerTools.generateRandomGuids",
		"onCommand:textPowerTools.generateRandomIpv4Addresses",
		"onCommand:textPowerTools.generateRandomIpv6Addresses",
		"onCommand:textPowerTools.generateLoremIpsumSentence",
		"onCommand:textPowerTools.generateLoremIpsumParagraph",
		"onCommand:textPowerTools.insertFullFilePath",
		"onCommand:textPowerTools.insertDirectoryPath",
		"onCommand:textPowerTools.insertFileName",
		"onCommand:textPowerTools.insertUnixTimestamp",
		"onCommand:textPowerTools.insertDecimalNumbers",
		"onCommand:textPowerTools.insertDecimalNumbersStartingAt",
		"onCommand:textPowerTools.insertDecimalNumbersWithIncrements",
		"onCommand:textPowerTools.insertDecimalNumbersWithIncrementsStartingAt",
		"onCommand:textPowerTools.insertHexNumbers",
		"onCommand:textPowerTools.insertHexNumbersStartingAt",
		"onCommand:textPowerTools.insertHexNumbersWithIncrements",
		"onCommand:textPowerTools.insertHexNumbersWithIncrementsStartingAt",
		"onCommand:textPowerTools.insertRomanNumerals",
		"onCommand:textPowerTools.insertRomanNumeralsStartingAt",
		"onCommand:textPowerTools.insertRomanNumeralsWithIncrements",
		"onCommand:textPowerTools.insertRomanNumeralsWithIncrementsStartingAt",
		"onCommand:textPowerTools.insertLineNumbers",
		"onCommand:textPowerTools.insertLineNumbersFixedLength",
		"onCommand:textPowerTools.insertRelativeLineNumbers",
		"onCommand:textPowerTools.insertRelativeLineNumbersFixedLength",
		"onCommand:textPowerTools.insertSequence",
		"onCommand:textPowerTools.insertLowercaseLetterSequence",
		"onCommand:textPowerTools.insertUppercaseLetterSequence",
		"onCommand:textPowerTools.insertLowercaseGreekLetterSequence",
		"onCommand:textPowerTools.insertUppercaseGreekLetterSequence",
		"onCommand:textPowerTools.insertNatoPhoneticAlphabetSequence",
		"onCommand:textPowerTools.insertLongEnglishMonthNamesSequence",
		"onCommand:textPowerTools.insertShortEnglishMonthNamesSequence",
		"onCommand:textPowerTools.insertLongLocaleMonthNamesSequence",
		"onCommand:textPowerTools.insertShortLocaleMonthNamesSequence",
		"onCommand:textPowerTools.insertLongEnglishDayNamesSequence",
		"onCommand:textPowerTools.insertShortEnglishDayNamesSequence",
		"onCommand:textPowerTools.insertLongLocaleDayNamesSequence",
		"onCommand:textPowerTools.insertShortLocaleDayNamesSequence",
		"onCommand:textPowerTools.spreadPasteFromClipboard",
		"onCommand:textPowerTools.spreadPasteFromClipboardSkipEmpty",
		"onCommand:textPowerTools.spreadPasteRepeatedlyFromClipboard",
		"onCommand:textPowerTools.spreadPasteRepeatedlyFromClipboardSkipEmpty",
		"onCommand:textPowerTools.pasteTextSlot1Content",
		"onCommand:textPowerTools.pasteTextSlot2Content",
		"onCommand:textPowerTools.pasteTextSlot3Content",
		"onCommand:textPowerTools.pasteTextSlot4Content",
		"onCommand:textPowerTools.pasteTextSlot5Content",
		"onCommand:textPowerTools.setTextSlot1Content",
		"onCommand:textPowerTools.setTextSlot2Content",
		"onCommand:textPowerTools.setTextSlot3Content",
		"onCommand:textPowerTools.setTextSlot4Content",
		"onCommand:textPowerTools.setTextSlot5Content",
		"onCommand:textPowerTools.convertHexadecimalNumbersToDecimal",
		"onCommand:textPowerTools.convertHexadecimalNumbersToDecimal8bit",
		"onCommand:textPowerTools.convertHexadecimalNumbersToDecimal16bit",
		"onCommand:textPowerTools.convertHexadecimalNumbersToDecimal32bit",
		"onCommand:textPowerTools.convertHexadecimalNumbersToDecimal64bit",
		"onCommand:textPowerTools.convertDecimalNumbersToHexadecimal",
		"onCommand:textPowerTools.convertDecimalNumbersToHexadecimal8bit",
		"onCommand:textPowerTools.convertDecimalNumbersToHexadecimal16bit",
		"onCommand:textPowerTools.convertDecimalNumbersToHexadecimal32bit",
		"onCommand:textPowerTools.convertDecimalNumbersToHexadecimal64bit",
		"onCommand:textPowerTools.convertToZalgoUltraLight",
		"onCommand:textPowerTools.convertToZalgoLight",
		"onCommand:textPowerTools.convertToZalgoMedium",
		"onCommand:textPowerTools.convertToZalgoHeavy",
		"onCommand:textPowerTools.increaseDecimalNumbersWithOne",
		"onCommand:textPowerTools.increaseHexNumbersWithOne",
		"onCommand:textPowerTools.increaseHexNumbersWithOne8bit",
		"onCommand:textPowerTools.increaseHexNumbersWithOne16bit",
		"onCommand:textPowerTools.increaseHexNumbersWithOne32bit",
		"onCommand:textPowerTools.increaseHexNumbersWithOne64bit",
		"onCommand:textPowerTools.decreaseDecimalNumbersWithOne",
		"onCommand:textPowerTools.decreaseHexNumbersWithOne",
		"onCommand:textPowerTools.decreaseHexNumbersWithOne8bit",
		"onCommand:textPowerTools.decreaseHexNumbersWithOne16bit",
		"onCommand:textPowerTools.decreaseHexNumbersWithOne32bit",
		"onCommand:textPowerTools.decreaseHexNumbersWithOne64bit",
		"onCommand:textPowerTools.changeDecimalNumbersWithIncrement",
		"onCommand:textPowerTools.changeHexNumbersWithIncrement",
		"onCommand:textPowerTools.changeHexNumbersWithIncrement8bit",
		"onCommand:textPowerTools.changeHexNumbersWithIncrement16bit",
		"onCommand:textPowerTools.changeHexNumbersWithIncrement32bit",
		"onCommand:textPowerTools.changeHexNumbersWithIncrement64bit",
		"onCommand:textPowerTools.urlEncodeText",
		"onCommand:textPowerTools.urlEncodeTextOnEachLine",
		"onCommand:textPowerTools.urlDecodeText",
		"onCommand:textPowerTools.encodeHtmlEntities",
		"onCommand:textPowerTools.encodeHtmlEntitiesOnEachLine",
		"onCommand:textPowerTools.encodeHtmlEntitiesWithNonAscii",
		"onCommand:textPowerTools.encodeHtmlEntitiesWithNonAsciiOnEachLine",
		"onCommand:textPowerTools.decodeHtmlEntities",
		"onCommand:textPowerTools.encodeXmlEntities",
		"onCommand:textPowerTools.encodeXmlEntitiesOnEachLine",
		"onCommand:textPowerTools.decodeXmlEntities",
		"onCommand:textPowerTools.escapeTextForJson",
		"onCommand:textPowerTools.unescapeTextForJson",
		"onCommand:textPowerTools.convertToJsonString",
		"onCommand:textPowerTools.convertToUnicodeEscapeSequences",
		"onCommand:textPowerTools.decodeUnicodeEscapeSequences",
		"onCommand:textPowerTools.base64EncodeText",
		"onCommand:textPowerTools.base64EncodeTextOnEachLine",
		"onCommand:textPowerTools.base64DecodeText",
		"onCommand:textPowerTools.base64DecodeTextOnEachLine",
		"onCommand:textPowerTools.duplicateSelectionContent",
		"onCommand:textPowerTools.repeatSelectionContent",
		"onCommand:textPowerTools.copySelectionsToNewEditor",
		"onCommand:textPowerTools.removeWhitespaceCharacters",
		"onCommand:textPowerTools.removeNewLines",
		"onCommand:textPowerTools.trimAndRemoveNewLines",
		"onCommand:textPowerTools.replaceNewLinesAndWhitespaceWithASingleSpace",
		"onCommand:textPowerTools.removeDuplicates",
		"onCommand:textPowerTools.removeEmptyLines",
		"onCommand:textPowerTools.removeSurplusEmptyLines",
		"onCommand:textPowerTools.removeBlankLines",
		"onCommand:textPowerTools.removeSurplusBlankLines",
		"onCommand:textPowerTools.removeControlCharacters"
	],
	"main": "./dist/extension",
	"browser": "./dist/extension-web.js",
	"contributes": {
		"commands": [
			{
				"command": "textPowerTools.filterLinesIncludingString",
				"category": "Text Power Tools",
				"title": "Filter lines including a string"
			},
			{
				"command": "textPowerTools.filterLinesIncludingStringToNewEditor",
				"category": "Text Power Tools",
				"title": "Filter lines including a string into a new editor"
			},
			{
				"command": "textPowerTools.copyLinesIncludingStringToClipboard",
				"category": "Text Power Tools",
				"title": "Copy lines including a string to the clipboard"
			},
			{
				"command": "textPowerTools.cutLinesIncludingStringToClipboard",
				"category": "Text Power Tools",
				"title": "Cut lines including a string to the clipboard"
			},
			{
				"command": "textPowerTools.filterLinesMatchingRegex",
				"category": "Text Power Tools",
				"title": "Filter lines matching a regex (grep)"
			},
			{
				"command": "textPowerTools.filterLinesMatchingRegexToNewEditor",
				"category": "Text Power Tools",
				"title": "Filter lines matching a regex (grep) into a new editor"
			},
			{
				"command": "textPowerTools.copyLinesMatchingRegexToClipboard",
				"category": "Text Power Tools",
				"title": "Copy lines matching a regex (grep) to clipboard"
			},
			{
				"command": "textPowerTools.cutLinesMatchingRegexToClipboard",
				"category": "Text Power Tools",
				"title": "Cut lines matching a regex (grep) to clipboard"
			},
			{
				"command": "textPowerTools.filterLinesIncludingSelection",
				"category": "Text Power Tools",
				"title": "Filter lines including the selected text"
			},
			{
				"command": "textPowerTools.filterLinesIncludingSelectionToNewEditor",
				"category": "Text Power Tools",
				"title": "Filter lines including the selected text into a new editor"
			},
			{
				"command": "textPowerTools.filterLinesNotIncludingString",
				"category": "Text Power Tools",
				"title": "Filter lines not including a string"
			},
			{
				"command": "textPowerTools.filterLinesNotIncludingStringToNewEditor",
				"category": "Text Power Tools",
				"title": "Filter lines not including a string into a new editor"
			},
			{
				"command": "textPowerTools.copyLinesNotIncludingStringToClipboard",
				"category": "Text Power Tools",
				"title": "Copy lines not including a string into a new editor"
			},
			{
				"command": "textPowerTools.cutLinesNotIncludingStringToClipboard",
				"category": "Text Power Tools",
				"title": "Cut lines not including a string into a new editor"
			},
			{
				"command": "textPowerTools.filterLinesNotMatchingRegex",
				"category": "Text Power Tools",
				"title": "Filter lines not matching a regex (grep)"
			},
			{
				"command": "textPowerTools.filterLinesNotMatchingRegexToNewEditor",
				"category": "Text Power Tools",
				"title": "Filter lines not matching a regex (grep) into a new editor"
			},
			{
				"command": "textPowerTools.copyLinesNotMatchingRegexToClipboard",
				"category": "Text Power Tools",
				"title": "Copy lines not matching a regex (grep) to clipboard"
			},
			{
				"command": "textPowerTools.cutLinesNotMatchingRegexToClipboard",
				"category": "Text Power Tools",
				"title": "Cut lines not matching a regex (grep) to clipboard"
			},
			{
				"command": "textPowerTools.filterLinesNotIncludingSelection",
				"category": "Text Power Tools",
				"title": "Filter lines not including the selected text"
			},
			{
				"command": "textPowerTools.filterLinesNotIncludingSelectionToNewEditor",
				"category": "Text Power Tools",
				"title": "Filter lines not including the selected text into a new editor"
			},
			{
				"command": "textPowerTools.extractInformation",
				"category": "Text Power Tools",
				"title": "Extract information from text"
			},
			{
				"command": "textPowerTools.extractInformationToNewEditor",
				"category": "Text Power Tools",
				"title": "Extract information from text into a new editor"
			},
			{
				"command": "textPowerTools.countOccurrences",
				"category": "Text Power Tools",
				"title": "Count line occurrences"
			},
			{
				"command": "textPowerTools.countOccurrencesToNewEditor",
				"category": "Text Power Tools",
				"title": "Count line occurrences into a new editor"
			},
			{
				"command": "textPowerTools.padStart",
				"category": "Text Power Tools",
				"title": "Pad start (left) with default string"
			},
			{
				"command": "textPowerTools.padStartWithCustomString",
				"category": "Text Power Tools",
				"title": "Pad start (left) with custom string"
			},
			{
				"command": "textPowerTools.padEnd",
				"category": "Text Power Tools",
				"title": "Pad end (right) with default string"
			},
			{
				"command": "textPowerTools.padEndWithCustomString",
				"category": "Text Power Tools",
				"title": "Pad end (right) with custom string"
			},
			{
				"command": "textPowerTools.appendPrefixToAllLines",
				"category": "Text Power Tools",
				"title": "Append prefix to all lines"
			},
			{
				"command": "textPowerTools.appendSuffixToAllLines",
				"category": "Text Power Tools",
				"title": "Append suffix to all lines"
			},
			{
				"command": "textPowerTools.wrapAllLinesWithTextSame",
				"category": "Text Power Tools",
				"title": "Wrap all lines with text (same prefix and suffix)"
			},
			{
				"command": "textPowerTools.wrapAllLinesWithTextDifferent",
				"category": "Text Power Tools",
				"title": "Wrap all lines with text (different prefix and suffix)"
			},
			{
				"command": "textPowerTools.separateWordsWithSpaces",
				"category": "Text Power Tools",
				"title": "Separate words with spaces"
			},
			{
				"command": "textPowerTools.separateWordsWithForwardSlashes",
				"category": "Text Power Tools",
				"title": "Separate words with forward slashes"
			},
			{
				"command": "textPowerTools.separateWordsWithBackslashes",
				"category": "Text Power Tools",
				"title": "Separate words with backslashes"
			},
			{
				"command": "textPowerTools.trimStart",
				"category": "Text Power Tools",
				"title": "Trim leading whitespace"
			},
			{
				"command": "textPowerTools.trim",
				"category": "Text Power Tools",
				"title": "Trim leading & trailing whitespace"
			},
			{
				"command": "textPowerTools.formatContentAsTableByTabulator",
				"category": "Text Power Tools",
				"title": "Format content as table using tabulator as splitter"
			},
			{
				"command": "textPowerTools.formatContentAsTableBySemicolon",
				"category": "Text Power Tools",
				"title": "Format content as table using semicolon as splitter"
			},
			{
				"command": "textPowerTools.formatContentAsTableByComma",
				"category": "Text Power Tools",
				"title": "Format content as table using comma as splitter"
			},
			{
				"command": "textPowerTools.formatContentAsTableByPipe",
				"category": "Text Power Tools",
				"title": "Format content as table using pipe as splitter"
			},
			{
				"command": "textPowerTools.formatContentAsTableByCustomCharacter",
				"category": "Text Power Tools",
				"title": "Format content as table using custom string as splitter"
			},
			{
				"command": "textPowerTools.formatContentAsTableBySemicolonWithPadding",
				"category": "Text Power Tools",
				"title": "Format content as table using semicolon as splitter (with padding)"
			},
			{
				"command": "textPowerTools.formatContentAsTableByPipeWithPadding",
				"category": "Text Power Tools",
				"title": "Format content as table using pipe as splitter (with padding)"
			},
			{
				"command": "textPowerTools.formatContentAsTableByCustomCharacterWithPadding",
				"category": "Text Power Tools",
				"title": "Format content as table using custom string as splitter (with padding)"
			},
			{
				"command": "textPowerTools.changeCaseToCamelCase",
				"category": "Text Power Tools",
				"title": "Change case to camel case (camelCase)"
			},
			{
				"command": "textPowerTools.changeCaseToPascalCase",
				"category": "Text Power Tools",
				"title": "Change case to Pascal case (PascalCase)"
			},
			{
				"command": "textPowerTools.changeCaseToSnakeCase",
				"category": "Text Power Tools",
				"title": "Change case to snake case (snake_case)"
			},
			{
				"command": "textPowerTools.changeCaseToDashCase",
				"category": "Text Power Tools",
				"title": "Change case to dash case (dash-case)"
			},
			{
				"command": "textPowerTools.changeCaseToConstantCase",
				"category": "Text Power Tools",
				"title": "Change case to constant case (CONSTANT_CASE)"
			},
			{
				"command": "textPowerTools.changeCaseToDotCase",
				"category": "Text Power Tools",
				"title": "Change case to dot case (dot.case)"
			},
			{
				"command": "textPowerTools.changeCaseToTitleCase",
				"category": "Text Power Tools",
				"title": "Change case to title case (Title Case)"
			},
			{
				"command": "textPowerTools.changeCaseToSpongeCase",
				"category": "Text Power Tools",
				"title": "Change case to sponge case (random capitalization)"
			},
			{
				"command": "textPowerTools.changeCaseToSwapCase",
				"category": "Text Power Tools",
				"title": "Swap text case"
			},
			{
				"command": "textPowerTools.latinize",
				"category": "Text Power Tools",
				"title": "Latinize text"
			},
			{
				"command": "textPowerTools.slugify",
				"category": "Text Power Tools",
				"title": "Slugify text"
			},
			{
				"command": "textPowerTools.unicodeNormalizationNFC",
				"category": "Text Power Tools",
				"title": "Convert to NFC Unicode normalization form"
			},
			{
				"command": "textPowerTools.unicodeNormalizationNFD",
				"category": "Text Power Tools",
				"title": "Convert to NFD Unicode normalization form"
			},
			{
				"command": "textPowerTools.unicodeNormalizationNFKC",
				"category": "Text Power Tools",
				"title": "Convert to NFKC Unicode normalization form"
			},
			{
				"command": "textPowerTools.unicodeNormalizationNFKD",
				"category": "Text Power Tools",
				"title": "Convert to NFKD Unicode normalization form"
			},
			{
				"command": "textPowerTools.caseSensitiveSortAscending",
				"category": "Text Power Tools",
				"title": "Sort lines ascending (case sensitive)"
			},
			{
				"command": "textPowerTools.caseSensitiveSortDescending",
				"category": "Text Power Tools",
				"title": "Sort lines descending (case sensitive)"
			},
			{
				"command": "textPowerTools.caseSensitiveSortAscendingAtColumn",
				"category": "Text Power Tools",
				"title": "Sort lines ascending (case sensitive at column of selection start)"
			},
			{
				"command": "textPowerTools.caseSensitiveSortDescendingAtColumn",
				"category": "Text Power Tools",
				"title": "Sort lines descending (case sensitive at column of selection start)"
			},
			{
				"command": "textPowerTools.caseInsensitiveSortAscendingAtColumn",
				"category": "Text Power Tools",
				"title": "Sort lines ascending (case insensitive at column of selection start)"
			},
			{
				"command": "textPowerTools.caseInsensitiveSortDescendingAtColumn",
				"category": "Text Power Tools",
				"title": "Sort lines descending (case insensitive at column of selection start)"
			},
			{
				"command": "textPowerTools.sortByLengthCaseSensitiveAscending",
				"category": "Text Power Tools",
				"title": "Sort lines by length (and then case sensitive) ascending"
			},
			{
				"command": "textPowerTools.sortByLengthCaseSensitiveDescending",
				"category": "Text Power Tools",
				"title": "Sort lines by length (and then case sensitive) descending "
			},
			{
				"command": "textPowerTools.sortByLengthCaseInsensitiveAscending",
				"category": "Text Power Tools",
				"title": "Sort lines by length (and then case insensitive) ascending"
			},
			{
				"command": "textPowerTools.sortByLengthCaseInsensitiveDescending",
				"category": "Text Power Tools",
				"title": "Sort lines by length (and then case insensitive) descending"
			},
			{
				"command": "textPowerTools.sortByWordCountAscending",
				"category": "Text Power Tools",
				"title": "Sort lines by word count ascending"
			},
			{
				"command": "textPowerTools.sortByWordCountDescending",
				"category": "Text Power Tools",
				"title": "Sort lines by word count descending"
			},
			{
				"command": "textPowerTools.sortByGraphemeCountAscending",
				"category": "Text Power Tools",
				"title": "Sort lines by grapheme count ascending"
			},
			{
				"command": "textPowerTools.sortByGraphemeCountDescending",
				"category": "Text Power Tools",
				"title": "Sort lines by grapheme count descending"
			},
			{
				"command": "textPowerTools.semverSortAscending",
				"category": "Text Power Tools",
				"title": "Sort lines ascending using semver rules"
			},
			{
				"command": "textPowerTools.semverSortDescending",
				"category": "Text Power Tools",
				"title": "Sort lines descending using semver rules"
			},
			{
				"command": "textPowerTools.ipAddressSortAscending",
				"category": "Text Power Tools",
				"title": "Sort IP addresses ascending"
			},
			{
				"command": "textPowerTools.ipAddressSortDescending",
				"category": "Text Power Tools",
				"title": "Sort IP addresses descending"
			},
			{
				"command": "textPowerTools.shuffleLines",
				"category": "Text Power Tools",
				"title": "Shuffle lines (sort by random order)"
			},
			{
				"command": "textPowerTools.reverseLines",
				"category": "Text Power Tools",
				"title": "Reverse lines"
			},
			{
				"command": "textPowerTools.generateRandomFromUserInput",
				"category": "Text Power Tools",
				"title": "Generate random items from user input"
			},
			{
				"command": "textPowerTools.generateRandomDecimalNumbersFromRange",
				"category": "Text Power Tools",
				"title": "Generate random decimal numbers from range"
			},
			{
				"command": "textPowerTools.generateRandomHexadecimalNumbersFromRange",
				"category": "Text Power Tools",
				"title": "Generate random hexadecimal numbers from range"
			},
			{
				"command": "textPowerTools.generateRandomRealNumbersFromRange",
				"category": "Text Power Tools",
				"title": "Generate random real numbers from range"
			},
			{
				"command": "textPowerTools.generateFakeData",
				"category": "Text Power Tools",
				"title": "Generate fake/random data..."
			},
			{
				"command": "textPowerTools.generateRandomGuids",
				"category": "Text Power Tools",
				"title": "Generate random GUIDs"
			},
			{
				"command": "textPowerTools.generateRandomIpv4Addresses",
				"category": "Text Power Tools",
				"title": "Generate random IPv4 Addresses"
			},
			{
				"command": "textPowerTools.generateRandomIpv6Addresses",
				"category": "Text Power Tools",
				"title": "Generate random IPv6 Addresses"
			},
			{
				"command": "textPowerTools.generateLoremIpsumSentence",
				"category": "Text Power Tools",
				"title": "Generate Lorem ipsum sentences"
			},
			{
				"command": "textPowerTools.generateLoremIpsumParagraph",
				"category": "Text Power Tools",
				"title": "Generate Lorem ipsum paragraphs"
			},
			{
				"command": "textPowerTools.insertFullFilePath",
				"category": "Text Power Tools",
				"title": "Insert full path of the opened file"
			},
			{
				"command": "textPowerTools.insertDirectoryPath",
				"category": "Text Power Tools",
				"title": "Insert directory path of the opened file"
			},
			{
				"command": "textPowerTools.insertFileName",
				"category": "Text Power Tools",
				"title": "Insert file name of the opened file"
			},
			{
				"command": "textPowerTools.insertUnixTimestamp",
				"category": "Text Power Tools",
				"title": "Insert Unix timestamp"
			},
			{
				"command": "textPowerTools.insertDecimalNumbers",
				"category": "Text Power Tools",
				"title": "Insert decimal number sequence"
			},
			{
				"command": "textPowerTools.insertDecimalNumbersStartingAt",
				"category": "Text Power Tools",
				"title": "Insert decimal number sequence starting at..."
			},
			{
				"command": "textPowerTools.insertDecimalNumbersWithIncrements",
				"category": "Text Power Tools",
				"title": "Insert decimal number sequence with custom increments"
			},
			{
				"command": "textPowerTools.insertDecimalNumbersWithIncrementsStartingAt",
				"category": "Text Power Tools",
				"title": "Insert decimal number sequence with custom increments starting at..."
			},
			{
				"command": "textPowerTools.insertHexNumbers",
				"category": "Text Power Tools",
				"title": "Insert hex number sequence"
			},
			{
				"command": "textPowerTools.insertHexNumbersStartingAt",
				"category": "Text Power Tools",
				"title": "Insert hex number sequence starting at..."
			},
			{
				"command": "textPowerTools.insertHexNumbersWithIncrements",
				"category": "Text Power Tools",
				"title": "Insert hex number sequence with custom increments"
			},
			{
				"command": "textPowerTools.insertHexNumbersWithIncrementsStartingAt",
				"category": "Text Power Tools",
				"title": "Insert hex number sequence with custom increments starting at..."
			},
			{
				"command": "textPowerTools.insertRomanNumerals",
				"category": "Text Power Tools",
				"title": "Insert Roman numeral sequence"
			},
			{
				"command": "textPowerTools.insertRomanNumeralsStartingAt",
				"category": "Text Power Tools",
				"title": "Insert Roman numeral sequence starting at..."
			},
			{
				"command": "textPowerTools.insertRomanNumeralsWithIncrements",
				"category": "Text Power Tools",
				"title": "Insert Roman numeral sequence with custom increments"
			},
			{
				"command": "textPowerTools.insertRomanNumeralsWithIncrementsStartingAt",
				"category": "Text Power Tools",
				"title": "Insert Roman numeral sequence with custom increments starting at..."
			},
			{
				"command": "textPowerTools.insertLineNumbers",
				"category": "Text Power Tools",
				"title": "Insert line numbers"
			},
			{
				"command": "textPowerTools.insertLineNumbersFixedLength",
				"category": "Text Power Tools",
				"title": "Insert fixed length line numbers"
			},
			{
				"command": "textPowerTools.insertRelativeLineNumbers",
				"category": "Text Power Tools",
				"title": "Insert line numbers starting with 1 at the first selected line"
			},
			{
				"command": "textPowerTools.insertRelativeLineNumbersFixedLength",
				"category": "Text Power Tools",
				"title": "Insert fixed line numbers starting with 1 at the first selected line"
			},
			{
				"command": "textPowerTools.insertSequence",
				"category": "Text Power Tools",
				"title": "Insert series of items..."
			},
			{
				"command": "textPowerTools.insertLowercaseLetterSequence",
				"category": "Text Power Tools",
				"title": "Insert series of lowercase letters"
			},
			{
				"command": "textPowerTools.insertUppercaseLetterSequence",
				"category": "Text Power Tools",
				"title": "Insert series of uppercase letters"
			},
			{
				"command": "textPowerTools.insertLowercaseGreekLetterSequence",
				"category": "Text Power Tools",
				"title": "Insert series of lowercase Greek letters"
			},
			{
				"command": "textPowerTools.insertUppercaseGreekLetterSequence",
				"category": "Text Power Tools",
				"title": "Insert series of uppercase Greek letters"
			},
			{
				"command": "textPowerTools.insertNatoPhoneticAlphabetSequence",
				"category": "Text Power Tools",
				"title": "Insert series of NATO phonetic alphabet items"
			},
			{
				"command": "textPowerTools.insertLongEnglishMonthNamesSequence",
				"category": "Text Power Tools",
				"title": "Insert series of long English month names"
			},
			{
				"command": "textPowerTools.insertShortEnglishMonthNamesSequence",
				"category": "Text Power Tools",
				"title": "Insert series of short English month names"
			},
			{
				"command": "textPowerTools.insertLongLocaleMonthNamesSequence",
				"category": "Text Power Tools",
				"title": "Insert series of long current/custom locale month names"
			},
			{
				"command": "textPowerTools.insertShortLocaleMonthNamesSequence",
				"category": "Text Power Tools",
				"title": "Insert series of short current/custom locale month names"
			},
			{
				"command": "textPowerTools.insertLongEnglishDayNamesSequence",
				"category": "Text Power Tools",
				"title": "Insert series of long English day names"
			},
			{
				"command": "textPowerTools.insertShortEnglishDayNamesSequence",
				"category": "Text Power Tools",
				"title": "Insert series of short English day names"
			},
			{
				"command": "textPowerTools.insertLongLocaleDayNamesSequence",
				"category": "Text Power Tools",
				"title": "Insert series of long current/custom locale day names"
			},
			{
				"command": "textPowerTools.insertShortLocaleDayNamesSequence",
				"category": "Text Power Tools",
				"title": "Insert series of short current/custom locale day names"
			},
			{
				"command": "textPowerTools.spreadPasteFromClipboard",
				"category": "Text Power Tools",
				"title": "Spread paste lines from clipboard"
			},
			{
				"command": "textPowerTools.spreadPasteFromClipboardSkipEmpty",
				"category": "Text Power Tools",
				"title": "Spread paste lines from clipboard (skip empty lines)"
			},
			{
				"command": "textPowerTools.spreadPasteRepeatedlyFromClipboard",
				"category": "Text Power Tools",
				"title": "Spread paste lines repeatedly from clipboard"
			},
			{
				"command": "textPowerTools.spreadPasteRepeatedlyFromClipboardSkipEmpty",
				"category": "Text Power Tools",
				"title": "Spread paste lines repeatedly from clipboard (skip empty lines)"
			},
			{
				"command": "textPowerTools.pasteTextSlot1Content",
				"category": "Text Power Tools",
				"title": "Paste text slot 1 content"
			},
			{
				"command": "textPowerTools.pasteTextSlot2Content",
				"category": "Text Power Tools",
				"title": "Paste text slot 2 content"
			},
			{
				"command": "textPowerTools.pasteTextSlot3Content",
				"category": "Text Power Tools",
				"title": "Paste text slot 3 content"
			},
			{
				"command": "textPowerTools.pasteTextSlot4Content",
				"category": "Text Power Tools",
				"title": "Paste text slot 4 content"
			},
			{
				"command": "textPowerTools.pasteTextSlot5Content",
				"category": "Text Power Tools",
				"title": "Paste text slot 5 content"
			},
			{
				"command": "textPowerTools.setTextSlot1Content",
				"category": "Text Power Tools",
				"title": "Set text slot 1 content"
			},
			{
				"command": "textPowerTools.setTextSlot2Content",
				"category": "Text Power Tools",
				"title": "Set text slot 2 content"
			},
			{
				"command": "textPowerTools.setTextSlot3Content",
				"category": "Text Power Tools",
				"title": "Set text slot 3 content"
			},
			{
				"command": "textPowerTools.setTextSlot4Content",
				"category": "Text Power Tools",
				"title": "Set text slot 4 content"
			},
			{
				"command": "textPowerTools.setTextSlot5Content",
				"category": "Text Power Tools",
				"title": "Set text slot 5 content"
			},
			{
				"command": "textPowerTools.convertHexadecimalNumbersToDecimal",
				"category": "Text Power Tools",
				"title": "Convert selected hexadecimal numbers to decimal"
			},
			{
				"command": "textPowerTools.convertHexadecimalNumbersToDecimal8bit",
				"category": "Text Power Tools",
				"title": "Convert selected hexadecimal numbers to decimal (using 8 bit arithmetic)"
			},
			{
				"command": "textPowerTools.convertHexadecimalNumbersToDecimal16bit",
				"category": "Text Power Tools",
				"title": "Convert selected hexadecimal numbers to decimal (using 16 bit arithmetic)"
			},
			{
				"command": "textPowerTools.convertHexadecimalNumbersToDecimal32bit",
				"category": "Text Power Tools",
				"title": "Convert selected hexadecimal numbers to decimal (using 32 bit arithmetic)"
			},
			{
				"command": "textPowerTools.convertHexadecimalNumbersToDecimal64bit",
				"category": "Text Power Tools",
				"title": "Convert selected hexadecimal numbers to decimal (using 64 bit arithmetic)"
			},
			{
				"command": "textPowerTools.convertDecimalNumbersToHexadecimal",
				"category": "Text Power Tools",
				"title": "Convert selected decimal numbers to hexadecimal"
			},
			{
				"command": "textPowerTools.convertDecimalNumbersToHexadecimal8bit",
				"category": "Text Power Tools",
				"title": "Convert selected decimal numbers to hexadecimal (using 8 bit arithmetic)"
			},
			{
				"command": "textPowerTools.convertDecimalNumbersToHexadecimal16bit",
				"category": "Text Power Tools",
				"title": "Convert selected decimal numbers to hexadecimal (using 16 bit arithmetic)"
			},
			{
				"command": "textPowerTools.convertDecimalNumbersToHexadecimal32bit",
				"category": "Text Power Tools",
				"title": "Convert selected decimal numbers to hexadecimal (using 32 bit arithmetic)"
			},
			{
				"command": "textPowerTools.convertDecimalNumbersToHexadecimal64bit",
				"category": "Text Power Tools",
				"title": "Convert selected decimal numbers to hexadecimal (using 64 bit arithmetic)"
			},
			{
				"command": "textPowerTools.convertToZalgoUltraLight",
				"category": "Text Power Tools",
				"title": "Convert selection to ultra light zalgo text"
			},
			{
				"command": "textPowerTools.convertToZalgoLight",
				"category": "Text Power Tools",
				"title": "Convert selection to light zalgo text"
			},
			{
				"command": "textPowerTools.convertToZalgoMedium",
				"category": "Text Power Tools",
				"title": "Convert selection to medium zalgo text"
			},
			{
				"command": "textPowerTools.convertToZalgoHeavy",
				"category": "Text Power Tools",
				"title": "Convert selection to heavy zalgo text"
			},
			{
				"command": "textPowerTools.increaseDecimalNumbersWithOne",
				"category": "Text Power Tools",
				"title": "Increase decimal numbers with 1"
			},
			{
				"command": "textPowerTools.increaseHexNumbersWithOne",
				"category": "Text Power Tools",
				"title": "Increase hexadecimal numbers with 1"
			},
			{
				"command": "textPowerTools.increaseHexNumbersWithOne8bit",
				"category": "Text Power Tools",
				"title": "Increase hexadecimal numbers with 1 (using 8 bit arithmetic)"
			},
			{
				"command": "textPowerTools.increaseHexNumbersWithOne16bit",
				"category": "Text Power Tools",
				"title": "Increase hexadecimal numbers with 1 (using 16 bit arithmetic)"
			},
			{
				"command": "textPowerTools.increaseHexNumbersWithOne32bit",
				"category": "Text Power Tools",
				"title": "Increase hexadecimal numbers with 1 (using 32 bit arithmetic)"
			},
			{
				"command": "textPowerTools.increaseHexNumbersWithOne64bit",
				"category": "Text Power Tools",
				"title": "Increase hexadecimal numbers with 1 (using 64 bit arithmetic)"
			},
			{
				"command": "textPowerTools.decreaseDecimalNumbersWithOne",
				"category": "Text Power Tools",
				"title": "Decrease decimal numbers with 1"
			},
			{
				"command": "textPowerTools.decreaseHexNumbersWithOne",
				"category": "Text Power Tools",
				"title": "Decrease hexadecimal numbers with 1"
			},
			{
				"command": "textPowerTools.decreaseHexNumbersWithOne8bit",
				"category": "Text Power Tools",
				"title": "Decrease hexadecimal numbers with 1 (using 8 bit arithmetic)"
			},
			{
				"command": "textPowerTools.decreaseHexNumbersWithOne16bit",
				"category": "Text Power Tools",
				"title": "Decrease hexadecimal numbers with 1 (using 16 bit arithmetic)"
			},
			{
				"command": "textPowerTools.decreaseHexNumbersWithOne32bit",
				"category": "Text Power Tools",
				"title": "Decrease hexadecimal numbers with 1 (using 32 bit arithmetic)"
			},
			{
				"command": "textPowerTools.decreaseHexNumbersWithOne64bit",
				"category": "Text Power Tools",
				"title": "Decrease hexadecimal numbers with 1 (using 64 bit arithmetic)"
			},
			{
				"command": "textPowerTools.changeDecimalNumbersWithIncrement",
				"category": "Text Power Tools",
				"title": "Increase/decrease decimal numbers with a custom value"
			},
			{
				"command": "textPowerTools.changeHexNumbersWithIncrement",
				"category": "Text Power Tools",
				"title": "Increase/decrease hexadecimal numbers with a custom value"
			},
			{
				"command": "textPowerTools.changeHexNumbersWithIncrement8bit",
				"category": "Text Power Tools",
				"title": "Increase/decrease hexadecimal numbers with a custom value (using 8 bit arithmetic)"
			},
			{
				"command": "textPowerTools.changeHexNumbersWithIncrement16bit",
				"category": "Text Power Tools",
				"title": "Increase/decrease hexadecimal numbers with a custom value (using 16 bit arithmetic)"
			},
			{
				"command": "textPowerTools.changeHexNumbersWithIncrement32bit",
				"category": "Text Power Tools",
				"title": "Increase/decrease hexadecimal numbers with a custom value (using 32 bit arithmetic)"
			},
			{
				"command": "textPowerTools.changeHexNumbersWithIncrement64bit",
				"category": "Text Power Tools",
				"title": "Increase/decrease hexadecimal numbers with a custom value (using 64 bit arithmetic)"
			},
			{
				"command": "textPowerTools.urlEncodeText",
				"category": "Text Power Tools",
				"title": "URL encode text"
			},
			{
				"command": "textPowerTools.urlEncodeTextOnEachLine",
				"category": "Text Power Tools",
				"title": "URL encode text on each line"
			},
			{
				"command": "textPowerTools.urlDecodeText",
				"category": "Text Power Tools",
				"title": "Decode URL encoded text"
			},
			{
				"command": "textPowerTools.encodeHtmlEntities",
				"category": "Text Power Tools",
				"title": "Encode HTML entities"
			},
			{
				"command": "textPowerTools.encodeHtmlEntitiesOnEachLine",
				"category": "Text Power Tools",
				"title": "Encode HTML entities on each lines"
			},
			{
				"command": "textPowerTools.encodeHtmlEntitiesWithNonAscii",
				"category": "Text Power Tools",
				"title": "Encode HTML entities including non ASCII characters"
			},
			{
				"command": "textPowerTools.encodeHtmlEntitiesWithNonAsciiOnEachLine",
				"category": "Text Power Tools",
				"title": "Encode HTML entities including non ASCII characters on each line"
			},
			{
				"command": "textPowerTools.decodeHtmlEntities",
				"category": "Text Power Tools",
				"title": "Decode HTML entities"
			},
			{
				"command": "textPowerTools.encodeXmlEntities",
				"category": "Text Power Tools",
				"title": "Encode XML entities"
			},
			{
				"command": "textPowerTools.encodeXmlEntitiesOnEachLine",
				"category": "Text Power Tools",
				"title": "Encode XML entities on each line"
			},
			{
				"command": "textPowerTools.decodeXmlEntities",
				"category": "Text Power Tools",
				"title": "Decode XML entities"
			},
			{
				"command": "textPowerTools.escapeTextForJson",
				"category": "Text Power Tools",
				"title": "Escape text for JSON"
			},
			{
				"command": "textPowerTools.unescapeTextForJson",
				"category": "Text Power Tools",
				"title": "Unescape JSON escaped text"
			},
			{
				"command": "textPowerTools.convertToJsonString",
				"category": "Text Power Tools",
				"title": "Convert text to JSON string"
			},
			{
				"command": "textPowerTools.convertToUnicodeEscapeSequences",
				"category": "Text Power Tools",
				"title": "Convert to Unicode escape sequences"
			},
			{
				"command": "textPowerTools.decodeUnicodeEscapeSequences",
				"category": "Text Power Tools",
				"title": "Decode Unicode escape sequences"
			},
			{
				"command": "textPowerTools.base64EncodeText",
				"category": "Text Power Tools",
				"title": "Encode text with base64"
			},
			{
				"command": "textPowerTools.base64EncodeTextOnEachLine",
				"category": "Text Power Tools",
				"title": "Encode text with base64 on each line"
			},
			{
				"command": "textPowerTools.base64DecodeText",
				"category": "Text Power Tools",
				"title": "Decode base64 text"
			},
			{
				"command": "textPowerTools.base64DecodeTextOnEachLine",
				"category": "Text Power Tools",
				"title": "Decode base64 text on each line"
			},
			{
				"command": "textPowerTools.duplicateSelectionContent",
				"category": "Text Power Tools",
				"title": "Duplicate selection content"
			},
			{
				"command": "textPowerTools.repeatSelectionContent",
				"category": "Text Power Tools",
				"title": "Repeat selection content"
			},
			{
				"command": "textPowerTools.copySelectionsToNewEditor",
				"category": "Text Power Tools",
				"title": "Copy content of selections to a new editor"
			},
			{
				"command": "textPowerTools.removeWhitespaceCharacters",
				"category": "Text Power Tools",
				"title": "Remove whitespace characters"
			},
			{
				"command": "textPowerTools.removeNewLines",
				"category": "Text Power Tools",
				"title": "Remove newlines"
			},
			{
				"command": "textPowerTools.trimAndRemoveNewLines",
				"category": "Text Power Tools",
				"title": "Trim whitespace and remove newlines"
			},
			{
				"command": "textPowerTools.replaceNewLinesAndWhitespaceWithASingleSpace",
				"category": "Text Power Tools",
				"title": "Replace new lines and whitespace with a single space"
			},
			{
				"command": "textPowerTools.removeDuplicates",
				"category": "Text Power Tools",
				"title": "Remove duplicated lines"
			},
			{
				"command": "textPowerTools.removeEmptyLines",
				"category": "Text Power Tools",
				"title": "Remove empty lines"
			},
			{
				"command": "textPowerTools.removeSurplusEmptyLines",
				"category": "Text Power Tools",
				"title": "Remove surplus empty lines"
			},
			{
				"command": "textPowerTools.removeBlankLines",
				"category": "Text Power Tools",
				"title": "Remove blank lines"
			},
			{
				"command": "textPowerTools.removeSurplusBlankLines",
				"category": "Text Power Tools",
				"title": "Remove surplus blank lines"
			},
			{
				"command": "textPowerTools.removeControlCharacters",
				"category": "Text Power Tools",
				"title": "Remove control characters"
			}
		],
		"menus": {
			"editor/context": [
				{
					"submenu": "textPowerTools.editorContextMain",
					"group": "t_textPowerTools"
				}
			],
			"textPowerTools.editorContextMain": [
				{
					"submenu": "textPowerTools.filterLines",
					"group": "tpt_01_filterAndExtract@1"
				},
				{
					"submenu": "textPowerTools.extraction",
					"group": "tpt_01_filterAndExtract@2"
				},
				{
					"submenu": "textPowerTools.formatContent",
					"group": "tpt_02_formatting@1"
				},
				{
					"submenu": "textPowerTools.changeLetters",
					"group": "tpt_02_formatting@2"
				},
				{
					"submenu": "textPowerTools.sortLines",
					"group": "tpt_02_formatting@3"
				},
				{
					"submenu": "textPowerTools.generateFakeContent",
					"group": "tpt_10_generate@1"
				},
				{
					"submenu": "textPowerTools.insertFacts",
					"group": "tpt_10_generate@2"
				},
				{
					"submenu": "textPowerTools.insertNumbers",
					"group": "tpt_10_generate@3"
				},
				{
					"submenu": "textPowerTools.insertSequences",
					"group": "tpt_10_generate@4"
				},
				{
					"submenu": "textPowerTools.paste",
					"group": "tpt_12_clipboard@1"
				},
				{
					"submenu": "textPowerTools.textSlots",
					"group": "tpt_12_clipboard@1"
				},
				{
					"submenu": "textPowerTools.convert",
					"group": "tpt_14_conversion@1"
				},
				{
					"submenu": "textPowerTools.increaseDecrease",
					"group": "tpt_14_conversion@2"
				},
				{
					"submenu": "textPowerTools.encodeDecode",
					"group": "tpt_14_conversion@3"
				},
				{
					"submenu": "textPowerTools.selection",
					"group": "tpt_16_selection@1"
				},
				{
					"submenu": "textPowerTools.remove",
					"group": "tpt_20_remove"
				}
			],
			"textPowerTools.filterLines": [
				{
					"command": "textPowerTools.filterLinesIncludingString",
					"group": "tpt_filterLines_1_includingString@1"
				},
				{
					"command": "textPowerTools.filterLinesIncludingStringToNewEditor",
					"group": "tpt_filterLines_1_includingString@2"
				},
				{
					"command": "textPowerTools.copyLinesIncludingStringToClipboard",
					"group": "tpt_filterLines_1_includingString@3"
				},
				{
					"command": "textPowerTools.cutLinesIncludingStringToClipboard",
					"group": "tpt_filterLines_1_includingString@4"
				},
				{
					"command": "textPowerTools.filterLinesMatchingRegex",
					"group": "tpt_filterLines_2_matchingRegex@1"
				},
				{
					"command": "textPowerTools.filterLinesMatchingRegexToNewEditor",
					"group": "tpt_filterLines_2_matchingRegex@2"
				},
				{
					"command": "textPowerTools.copyLinesMatchingRegexToClipboard",
					"group": "tpt_filterLines_2_matchingRegex@3"
				},
				{
					"command": "textPowerTools.cutLinesMatchingRegexToClipboard",
					"group": "tpt_filterLines_2_matchingRegex@4"
				},
				{
					"command": "textPowerTools.filterLinesIncludingSelection",
					"group": "tpt_filterLines_3_includingSelection@1"
				},
				{
					"command": "textPowerTools.filterLinesIncludingSelectionToNewEditor",
					"group": "tpt_filterLines_3_includingSelection@2"
				},
				{
					"command": "textPowerTools.filterLinesNotIncludingString",
					"group": "tpt_filterLines_4_notIncludingString@1"
				},
				{
					"command": "textPowerTools.filterLinesNotIncludingStringToNewEditor",
					"group": "tpt_filterLines_4_notIncludingString@2"
				},
				{
					"command": "textPowerTools.copyLinesNotIncludingStringToClipboard",
					"group": "tpt_filterLines_4_notIncludingString@3"
				},
				{
					"command": "textPowerTools.cutLinesNotIncludingStringToClipboard",
					"group": "tpt_filterLines_4_notIncludingString@4"
				},
				{
					"command": "textPowerTools.filterLinesNotMatchingRegex",
					"group": "tpt_filterLines_5_notMatchingRegex@1"
				},
				{
					"command": "textPowerTools.filterLinesNotMatchingRegexToNewEditor",
					"group": "tpt_filterLines_5_notMatchingRegex@2"
				},
				{
					"command": "textPowerTools.copyLinesNotMatchingRegexToClipboard",
					"group": "tpt_filterLines_5_notMatchingRegex@3"
				},
				{
					"command": "textPowerTools.cutLinesNotMatchingRegexToClipboard",
					"group": "tpt_filterLines_5_notMatchingRegex@4"
				},
				{
					"command": "textPowerTools.filterLinesNotIncludingSelection",
					"group": "tpt_filterLines_6_notIncludingSelection@1"
				},
				{
					"command": "textPowerTools.filterLinesNotIncludingSelectionToNewEditor",
					"group": "tpt_filterLines_6_notIncludingSelection@2"
				}
			],
			"textPowerTools.extraction": [
				{
					"command": "textPowerTools.extractInformation",
					"group": "tpt_1_extractInfo@1"
				},
				{
					"command": "textPowerTools.extractInformationToNewEditor",
					"group": "tpt_1_extractInfo@2"
				},
				{
					"command": "textPowerTools.countOccurrences",
					"group": "tpt_2_countOccurrences@1"
				},
				{
					"command": "textPowerTools.countOccurrencesToNewEditor",
					"group": "tpt_2_countOccurrences@2"
				}
			],
			"textPowerTools.formatContent": [
				{
					"command": "textPowerTools.padStart",
					"group": "tpt_1_pad@1"
				},
				{
					"command": "textPowerTools.padStartWithCustomString",
					"group": "tpt_1_pad@2"
				},
				{
					"command": "textPowerTools.padEnd",
					"group": "tpt_1_pad@3"
				},
				{
					"command": "textPowerTools.padEndWithCustomString",
					"group": "tpt_1_pad@4"
				},
				{
					"command": "textPowerTools.appendPrefixToAllLines",
					"group": "tpt_2_affix@1"
				},
				{
					"command": "textPowerTools.appendSuffixToAllLines",
					"group": "tpt_2_affix@2"
				},
				{
					"command": "textPowerTools.wrapAllLinesWithTextSame",
					"group": "tpt_2_affix@3"
				},
				{
					"command": "textPowerTools.wrapAllLinesWithTextDifferent",
					"group": "tpt_2_affix@4"
				},
				{
					"command": "textPowerTools.separateWordsWithSpaces",
					"group": "tpt_3_separateWords@1"
				},
				{
					"command": "textPowerTools.separateWordsWithForwardSlashes",
					"group": "tpt_3_separateWords@2"
				},
				{
					"command": "textPowerTools.separateWordsWithBackslashes",
					"group": "tpt_3_separateWords@3"
				},
				{
					"command": "textPowerTools.trimStart",
					"group": "tpt_4_trim@4"
				},
				{
					"command": "textPowerTools.trim",
					"group": "tpt_4_trim@4"
				},
				{
					"command": "textPowerTools.formatContentAsTableByTabulator",
					"group": "tpt_5_formatContentAsTable@1"
				},
				{
					"command": "textPowerTools.formatContentAsTableBySemicolon",
					"group": "tpt_5_formatContentAsTable@2"
				},
				{
					"command": "textPowerTools.formatContentAsTableByComma",
					"group": "tpt_5_formatContentAsTable@3"
				},
				{
					"command": "textPowerTools.formatContentAsTableByPipe",
					"group": "tpt_5_formatContentAsTable@4"
				},
				{
					"command": "textPowerTools.formatContentAsTableByCustomCharacter",
					"group": "tpt_5_formatContentAsTable@5"
				},
				{
					"command": "textPowerTools.formatContentAsTableBySemicolonWithPadding",
					"group": "tpt_5_formatContentAsTable@6"
				},
				{
					"command": "textPowerTools.formatContentAsTableByPipeWithPadding",
					"group": "tpt_5_formatContentAsTable@7"
				},
				{
					"command": "textPowerTools.formatContentAsTableByCustomCharacterWithPadding",
					"group": "tpt_5_formatContentAsTable@8"
				}
			],
			"textPowerTools.changeLetters": [
				{
					"command": "textPowerTools.changeCaseToCamelCase",
					"group": "tpt_1_changeCase@1"
				},
				{
					"command": "textPowerTools.changeCaseToPascalCase",
					"group": "tpt_1_changeCase@2"
				},
				{
					"command": "textPowerTools.changeCaseToSnakeCase",
					"group": "tpt_1_changeCase@3"
				},
				{
					"command": "textPowerTools.changeCaseToDashCase",
					"group": "tpt_1_changeCase@4"
				},
				{
					"command": "textPowerTools.changeCaseToConstantCase",
					"group": "tpt_1_changeCase@5"
				},
				{
					"command": "textPowerTools.changeCaseToDotCase",
					"group": "tpt_1_changeCase@6"
				},
				{
					"command": "textPowerTools.changeCaseToTitleCase",
					"group": "tpt_1_changeCase@7"
				},
				{
					"command": "textPowerTools.changeCaseToSpongeCase",
					"group": "tpt_1_changeCase@8"
				},
				{
					"command": "textPowerTools.changeCaseToSwapCase",
					"group": "tpt_1_changeCase@9"
				},
				{
					"command": "textPowerTools.latinize",
					"group": "tpt_2_changeLetters@1"
				},
				{
					"command": "textPowerTools.slugify",
					"group": "tpt_2_changeLetters@2"
				},
				{
					"command": "textPowerTools.unicodeNormalizationNFC",
					"group": "tpt_3_unicodeNormalization@1"
				},
				{
					"command": "textPowerTools.unicodeNormalizationNFD",
					"group": "tpt_3_unicodeNormalization@2"
				},
				{
					"command": "textPowerTools.unicodeNormalizationNFKC",
					"group": "tpt_3_unicodeNormalization@3"
				},
				{
					"command": "textPowerTools.unicodeNormalizationNFKD",
					"group": "tpt_3_unicodeNormalization@4"
				}
			],
			"textPowerTools.insertFacts": [
				{
					"command": "textPowerTools.insertFullFilePath",
					"group": "tpt_1_insertFileSystemStuff@1"
				},
				{
					"command": "textPowerTools.insertDirectoryPath",
					"group": "tpt_1_insertFileSystemStuff@2"
				},
				{
					"command": "textPowerTools.insertFileName",
					"group": "tpt_1_insertFileSystemStuff@3"
				},
				{
					"command": "textPowerTools.insertUnixTimestamp",
					"group": "tpt_1_insertTimeStuff@1"
				}
			],
			"textPowerTools.insertNumbers": [
				{
					"command": "textPowerTools.insertDecimalNumbers",
					"group": "tpt_1_insertDecimalNumbers@1"
				},
				{
					"command": "textPowerTools.insertDecimalNumbersStartingAt",
					"group": "tpt_1_insertDecimalNumbers@2"
				},
				{
					"command": "textPowerTools.insertDecimalNumbersWithIncrements",
					"group": "tpt_1_insertDecimalNumbers@3"
				},
				{
					"command": "textPowerTools.insertDecimalNumbersWithIncrementsStartingAt",
					"group": "tpt_2_insertDecimalNumbers@4"
				},
				{
					"command": "textPowerTools.insertHexNumbers",
					"group": "tpt_2_insertHexNumbers@1"
				},
				{
					"command": "textPowerTools.insertHexNumbersStartingAt",
					"group": "tpt_2_insertHexNumbers@2"
				},
				{
					"command": "textPowerTools.insertHexNumbersWithIncrements",
					"group": "tpt_2_insertHexNumbers@3"
				},
				{
					"command": "textPowerTools.insertHexNumbersWithIncrementsStartingAt",
					"group": "tpt_2_insertHexNumbers@4"
				},
				{
					"command": "textPowerTools.insertRomanNumerals",
					"group": "tpt_2_insertRomanNumerals@1"
				},
				{
					"command": "textPowerTools.insertRomanNumeralsStartingAt",
					"group": "tpt_2_insertRomanNumerals@2"
				},
				{
					"command": "textPowerTools.insertRomanNumeralsWithIncrements",
					"group": "tpt_2_insertRomanNumerals@3"
				},
				{
					"command": "textPowerTools.insertRomanNumeralsWithIncrementsStartingAt",
					"group": "tpt_2_insertRomanNumerals@4"
				},
				{
					"command": "textPowerTools.insertLineNumbers",
					"group": "tpt_3_insertLineNumbers@1"
				},
				{
					"command": "textPowerTools.insertLineNumbersFixedLength",
					"group": "tpt_3_insertLineNumbers@2"
				},
				{
					"command": "textPowerTools.insertRelativeLineNumbers",
					"group": "tpt_3_insertLineNumbers@3"
				},
				{
					"command": "textPowerTools.insertRelativeLineNumbersFixedLength",
					"group": "tpt_3_insertLineNumbers@4"
				}
			],
			"textPowerTools.insertSequences": [
				{
					"command": "textPowerTools.insertSequence",
					"group": "tpt_1_sequence@1"
				},
				{
					"command": "textPowerTools.insertLowercaseLetterSequence",
					"group": "tpt_2_letters@1"
				},
				{
					"command": "textPowerTools.insertUppercaseLetterSequence",
					"group": "tpt_2_letters@2"
				},
				{
					"command": "textPowerTools.insertLowercaseGreekLetterSequence",
					"group": "tpt_2_letters@3"
				},
				{
					"command": "textPowerTools.insertUppercaseGreekLetterSequence",
					"group": "tpt_2_letters@4"
				},
				{
					"command": "textPowerTools.insertNatoPhoneticAlphabetSequence",
					"group": "tpt_3_words@1"
				},
				{
					"command": "textPowerTools.insertLongEnglishMonthNamesSequence",
					"group": "tpt_4_englishDateRelated@1"
				},
				{
					"command": "textPowerTools.insertShortEnglishMonthNamesSequence",
					"group": "tpt_4_englishDateRelated@2"
				},
				{
					"command": "textPowerTools.insertLongEnglishDayNamesSequence",
					"group": "tpt_4_englishDateRelated@3"
				},
				{
					"command": "textPowerTools.insertShortEnglishDayNamesSequence",
					"group": "tpt_4_englishDateRelated@4"
				},
				{
					"command": "textPowerTools.insertLongLocaleMonthNamesSequence",
					"group": "tpt_5_localeDateRelated@1"
				},
				{
					"command": "textPowerTools.insertShortLocaleMonthNamesSequence",
					"group": "tpt_5_localeDateRelated@2"
				},
				{
					"command": "textPowerTools.insertLongLocaleDayNamesSequence",
					"group": "tpt_5_localeDateRelated@3"
				},
				{
					"command": "textPowerTools.insertShortLocaleDayNamesSequence",
					"group": "tpt_5_localeDateRelated@4"
				}
			],
			"textPowerTools.paste": [
				{
					"command": "textPowerTools.spreadPasteFromClipboard",
					"group": "tpt_1_spreadPaste@1"
				},
				{
					"command": "textPowerTools.spreadPasteFromClipboardSkipEmpty",
					"group": "tpt_1_spreadPaste@1"
				},
				{
					"command": "textPowerTools.spreadPasteRepeatedlyFromClipboard",
					"group": "tpt_1_spreadPaste@1"
				},
				{
					"command": "textPowerTools.spreadPasteRepeatedlyFromClipboardSkipEmpty",
					"group": "tpt_1_spreadPaste@1"
				}
			],
			"textPowerTools.textSlots": [
				{
					"command": "textPowerTools.pasteTextSlot1Content",
					"group": "tpt_1_pasteTextSlot@1"
				},
				{
					"command": "textPowerTools.pasteTextSlot2Content",
					"group": "tpt_1_pasteTextSlot@2"
				},
				{
					"command": "textPowerTools.pasteTextSlot3Content",
					"group": "tpt_1_pasteTextSlot@3"
				},
				{
					"command": "textPowerTools.pasteTextSlot4Content",
					"group": "tpt_1_pasteTextSlot@4"
				},
				{
					"command": "textPowerTools.pasteTextSlot5Content",
					"group": "tpt_1_pasteTextSlot@5"
				},
				{
					"command": "textPowerTools.setTextSlot1Content",
					"group": "tpt_2_setTextSlot@1"
				},
				{
					"command": "textPowerTools.setTextSlot2Content",
					"group": "tpt_2_setTextSlot@2"
				},
				{
					"command": "textPowerTools.setTextSlot3Content",
					"group": "tpt_2_setTextSlot@3"
				},
				{
					"command": "textPowerTools.setTextSlot4Content",
					"group": "tpt_2_setTextSlot@4"
				},
				{
					"command": "textPowerTools.setTextSlot5Content",
					"group": "tpt_2_setTextSlot@5"
				}
			],
			"textPowerTools.generateFakeContent": [
				{
					"command": "textPowerTools.generateFakeData",
					"group": "tpt_1_sequence@2"
				},
				{
					"command": "textPowerTools.generateRandomFromUserInput",
					"group": "tpt_2_generateFromUserInput@1"
				},
				{
					"command": "textPowerTools.generateRandomDecimalNumbersFromRange",
					"group": "tpt_2_generateFromUserInput@1"
				},
				{
					"command": "textPowerTools.generateRandomHexadecimalNumbersFromRange",
					"group": "tpt_2_generateFromUserInput@1"
				},
				{
					"command": "textPowerTools.generateRandomRealNumbersFromRange",
					"group": "tpt_2_generateFromUserInput@1"
				},
				{
					"command": "textPowerTools.generateRandomGuids",
					"group": "tpt_3_generateItStuff@1"
				},
				{
					"command": "textPowerTools.generateRandomIpv4Addresses",
					"group": "tpt_3_generateItStuff@2"
				},
				{
					"command": "textPowerTools.generateRandomIpv6Addresses",
					"group": "tpt_3_generateItStuff@3"
				},
				{
					"command": "textPowerTools.generateLoremIpsumSentence",
					"group": "tpt_4_generateLoremIpsum@1"
				},
				{
					"command": "textPowerTools.generateLoremIpsumParagraph",
					"group": "tpt_4_generateLoremIpsum@3"
				}
			],
			"textPowerTools.convert": [
				{
					"command": "textPowerTools.convertDecimalNumbersToHexadecimal",
					"group": "tpt_1_convertDecToHex@1"
				},
				{
					"command": "textPowerTools.convertDecimalNumbersToHexadecimal8bit",
					"group": "tpt_1_convertDecToHex@2"
				},
				{
					"command": "textPowerTools.convertDecimalNumbersToHexadecimal16bit",
					"group": "tpt_1_convertDecToHex@3"
				},
				{
					"command": "textPowerTools.convertDecimalNumbersToHexadecimal32bit",
					"group": "tpt_1_convertDecToHex@4"
				},
				{
					"command": "textPowerTools.convertDecimalNumbersToHexadecimal64bit",
					"group": "tpt_1_convertDecToHex@5"
				},
				{
					"command": "textPowerTools.convertHexadecimalNumbersToDecimal8bit",
					"group": "tpt_2_convertHexToDec@1"
				},
				{
					"command": "textPowerTools.convertHexadecimalNumbersToDecimal16bit",
					"group": "tpt_2_convertHexToDec@2"
				},
				{
					"command": "textPowerTools.convertHexadecimalNumbersToDecimal32bit",
					"group": "tpt_2_convertHexToDec@3"
				},
				{
					"command": "textPowerTools.convertHexadecimalNumbersToDecimal64bit",
					"group": "tpt_2_convertHexToDec@4"
				},
				{
					"command": "textPowerTools.convertHexadecimalNumbersToDecimal",
					"group": "tpt_2_convertHexToDec@5"
				},
				{
					"command": "textPowerTools.convertToZalgoUltraLight",
					"group": "tpt_3_zalgo@1"
				},
				{
					"command": "textPowerTools.convertToZalgoLight",
					"group": "tpt_3_zalgo@2"
				},
				{
					"command": "textPowerTools.convertToZalgoMedium",
					"group": "tpt_3_zalgo@3"
				},
				{
					"command": "textPowerTools.convertToZalgoHeavy",
					"group": "tpt_3_zalgo@4"
				}
			],
			"textPowerTools.increaseDecrease": [
				{
					"command": "textPowerTools.increaseDecimalNumbersWithOne",
					"group": "tpt_1_increaseOne@1"
				},
				{
					"command": "textPowerTools.increaseHexNumbersWithOne",
					"group": "tpt_1_increaseOne@2"
				},
				{
					"command": "textPowerTools.increaseHexNumbersWithOne8bit",
					"group": "tpt_1_increaseOne@3"
				},
				{
					"command": "textPowerTools.increaseHexNumbersWithOne16bit",
					"group": "tpt_1_increaseOne@4"
				},
				{
					"command": "textPowerTools.increaseHexNumbersWithOne32bit",
					"group": "tpt_1_increaseOne@5"
				},
				{
					"command": "textPowerTools.increaseHexNumbersWithOne64bit",
					"group": "tpt_1_increaseOne@6"
				},
				{
					"command": "textPowerTools.decreaseDecimalNumbersWithOne",
					"group": "tpt_2_decreaseOne@1"
				},
				{
					"command": "textPowerTools.decreaseHexNumbersWithOne",
					"group": "tpt_2_decreaseOne@2"
				},
				{
					"command": "textPowerTools.decreaseHexNumbersWithOne8bit",
					"group": "tpt_2_decreaseOne@3"
				},
				{
					"command": "textPowerTools.decreaseHexNumbersWithOne16bit",
					"group": "tpt_2_decreaseOne@4"
				},
				{
					"command": "textPowerTools.decreaseHexNumbersWithOne32bit",
					"group": "tpt_2_decreaseOne@5"
				},
				{
					"command": "textPowerTools.decreaseHexNumbersWithOne64bit",
					"group": "tpt_2_decreaseOne@6"
				},
				{
					"command": "textPowerTools.changeDecimalNumbersWithIncrement",
					"group": "tpt_3_change@1"
				},
				{
					"command": "textPowerTools.changeHexNumbersWithIncrement",
					"group": "tpt_3_change@2"
				},
				{
					"command": "textPowerTools.changeHexNumbersWithIncrement8bit",
					"group": "tpt_3_change@3"
				},
				{
					"command": "textPowerTools.changeHexNumbersWithIncrement16bit",
					"group": "tpt_3_change@4"
				},
				{
					"command": "textPowerTools.changeHexNumbersWithIncrement32bit",
					"group": "tpt_3_change@5"
				},
				{
					"command": "textPowerTools.changeHexNumbersWithIncrement64bit",
					"group": "tpt_3_change@6"
				}
			],
			"textPowerTools.encodeDecode": [
				{
					"command": "textPowerTools.urlEncodeText",
					"group": "tpt_1_urlEncode@1"
				},
				{
					"command": "textPowerTools.urlEncodeTextOnEachLine",
					"group": "tpt_1_urlEncode@2"
				},
				{
					"command": "textPowerTools.urlDecodeText",
					"group": "tpt_1_urlEncode@3"
				},
				{
					"command": "textPowerTools.encodeHtmlEntities",
					"group": "tpt_2_htmlXml@1"
				},
				{
					"command": "textPowerTools.encodeHtmlEntitiesOnEachLine",
					"group": "tpt_2_htmlXml@2"
				},
				{
					"command": "textPowerTools.encodeHtmlEntitiesWithNonAscii",
					"group": "tpt_2_htmlXml@3"
				},
				{
					"command": "textPowerTools.encodeHtmlEntitiesWithNonAsciiOnEachLine",
					"group": "tpt_2_htmlXml@4"
				},
				{
					"command": "textPowerTools.decodeHtmlEntities",
					"group": "tpt_2_htmlXml@5"
				},
				{
					"command": "textPowerTools.encodeXmlEntities",
					"group": "tpt_2_htmlXml@6"
				},
				{
					"command": "textPowerTools.encodeXmlEntitiesOnEachLine",
					"group": "tpt_2_htmlXml@7"
				},
				{
					"command": "textPowerTools.decodeXmlEntities",
					"group": "tpt_2_htmlXml@8"
				},
				{
					"command": "textPowerTools.escapeTextForJson",
					"group": "tpt_3_json@1"
				},
				{
					"command": "textPowerTools.unescapeTextForJson",
					"group": "tpt_3_json@2"
				},
				{
					"command": "textPowerTools.convertToJsonString",
					"group": "tpt_3_json@3"
				},
				{
					"command": "textPowerTools.convertToUnicodeEscapeSequences",
					"group": "tpt_4_ues@1"
				},
				{
					"command": "textPowerTools.decodeUnicodeEscapeSequences",
					"group": "tpt_4_ues@2"
				},
				{
					"command": "textPowerTools.base64EncodeText",
					"group": "tpt_5_base64@1"
				},
				{
					"command": "textPowerTools.base64EncodeTextOnEachLine",
					"group": "tpt_5_base64@2"
				},
				{
					"command": "textPowerTools.base64DecodeText",
					"group": "tpt_5_base64@3"
				},
				{
					"command": "textPowerTools.base64DecodeTextOnEachLine",
					"group": "tpt_5_base64@4"
				}
			],
			"textPowerTools.sortLines": [
				{
					"command": "textPowerTools.caseSensitiveSortAscending",
					"group": "tpt_1_caseSensitive@1"
				},
				{
					"command": "textPowerTools.caseSensitiveSortDescending",
					"group": "tpt_1_caseSensitive@2"
				},
				{
					"command": "textPowerTools.caseSensitiveSortAscendingAtColumn",
					"group": "tpt_1_caseSensitive@3"
				},
				{
					"command": "textPowerTools.caseSensitiveSortDescendingAtColumn",
					"group": "tpt_1_caseSensitive@4"
				},
				{
					"command": "textPowerTools.caseInsensitiveSortAscendingAtColumn",
					"group": "tpt_2_caseInsensitive@1"
				},
				{
					"command": "textPowerTools.caseInsensitiveSortDescendingAtColumn",
					"group": "tpt_2_caseInsensitive@2"
				},
				{
					"command": "textPowerTools.sortByLengthCaseSensitiveAscending",
					"group": "tpt_3_length@1"
				},
				{
					"command": "textPowerTools.sortByLengthCaseSensitiveDescending",
					"group": "tpt_3_length@2"
				},
				{
					"command": "textPowerTools.sortByLengthCaseInsensitiveAscending",
					"group": "tpt_3_length@3"
				},
				{
					"command": "textPowerTools.sortByLengthCaseInsensitiveDescending",
					"group": "tpt_3_length@4"
				},
				{
					"command": "textPowerTools.sortByWordCountAscending",
					"group": "tpt_3_length@5"
				},
				{
					"command": "textPowerTools.sortByWordCountDescending",
					"group": "tpt_3_length@6"
				},
				{
					"command": "textPowerTools.sortByGraphemeCountDescending",
					"group": "tpt_3_length@7"
				},
				{
					"command": "textPowerTools.sortByGraphemeCountDescending",
					"group": "tpt_3_length@8"
				},
				{
					"command": "textPowerTools.semverSortAscending",
					"group": "tpt_4_semver@1"
				},
				{
					"command": "textPowerTools.semverSortDescending",
					"group": "tpt_4_semver@2"
				},
				{
					"command": "textPowerTools.ipAddressSortAscending",
					"group": "tpt_5_ipAddress@1"
				},
				{
					"command": "textPowerTools.ipAddressSortDescending",
					"group": "tpt_5_ipAddress@2"
				},
				{
					"command": "textPowerTools.shuffleLines",
					"group": "tpt_9_other@1"
				},
				{
					"command": "textPowerTools.reverseLines",
					"group": "tpt_9_other@2"
				}
			],
			"textPowerTools.selection": [
				{
					"command": "textPowerTools.duplicateSelectionContent",
					"group": "tpt_1_selection@1",
					"when": "editorHasSelection"
				},
				{
					"command": "textPowerTools.repeatSelectionContent",
					"group": "tpt_1_selection@2",
					"when": "editorHasSelection"
				},
				{
					"command": "textPowerTools.copySelectionsToNewEditor",
					"group": "tpt_1_selection@3",
					"when": "editorHasSelection"
				}
			],
			"textPowerTools.remove": [
				{
					"command": "textPowerTools.removeWhitespaceCharacters",
					"group": "tpt_1_removeCharacters@1"
				},
				{
					"command": "textPowerTools.removeNewLines",
					"group": "tpt_1_removeCharacters@2"
				},
				{
					"command": "textPowerTools.trimAndRemoveNewLines",
					"group": "tpt_1_removeCharacters@3"
				},
				{
					"command": "textPowerTools.replaceNewLinesAndWhitespaceWithASingleSpace",
					"group": "tpt_1_removeCharacters@3"
				},
				{
					"command": "textPowerTools.removeDuplicates",
					"group": "tpt_2_removeDupe@1"
				},
				{
					"command": "textPowerTools.removeEmptyLines",
					"group": "tpt_3_removeLines@1"
				},
				{
					"command": "textPowerTools.removeSurplusEmptyLines",
					"group": "tpt_3_removeLines@2"
				},
				{
					"command": "textPowerTools.removeBlankLines",
					"group": "tpt_3_removeLines@3"
				},
				{
					"command": "textPowerTools.removeSurplusBlankLines",
					"group": "tpt_3_removeLines@4"
				},
				{
					"command": "textPowerTools.removeControlCharacters",
					"group": "tpt_4_removeControlCharacters@1"
				}
			]
		},
		"submenus": [
			{
				"id": "textPowerTools.editorContextMain",
				"label": "Text Power Tools"
			},
			{
				"id": "textPowerTools.filterLines",
				"label": "Filter lines (like grep)",
				"icon": "$(filter)"
			},
			{
				"id": "textPowerTools.extraction",
				"label": "Extract info",
				"icon": "$(text-size)"
			},
			{
				"id": "textPowerTools.formatContent",
				"label": "Format content",
				"icon": "$(filter)"
			},
			{
				"id": "textPowerTools.changeLetters",
				"label": "Change letters",
				"icon": "$(text-size)"
			},
			{
				"id": "textPowerTools.insertFacts",
				"label": "Insert facts"
			},
			{
				"id": "textPowerTools.insertNumbers",
				"label": "Insert numbers"
			},
			{
				"id": "textPowerTools.insertSequences",
				"label": "Insert series of items"
			},
			{
				"id": "textPowerTools.paste",
				"label": "Paste"
			},
			{
				"id": "textPowerTools.textSlots",
				"label": "Text slots (clipboard-like)"
			},
			{
				"id": "textPowerTools.convert",
				"label": "Convert"
			},
			{
				"id": "textPowerTools.increaseDecrease",
				"label": "Increase/decrease numbers"
			},
			{
				"id": "textPowerTools.encodeDecode",
				"label": "Encode/decode"
			},
			{
				"id": "textPowerTools.sortLines",
				"label": "Sort lines"
			},
			{
				"id": "textPowerTools.generateFakeContent",
				"label": "Generate fake/random content"
			},
			{
				"id": "textPowerTools.selection",
				"label": "Selection"
			},
			{
				"id": "textPowerTools.remove",
				"label": "Remove content"
			}
		],
		"configuration": {
			"type": "object",
			"title": "Text Power Tools",
			"properties": {
				"textPowerTools.caseSensitiveFiltering": {
					"type": "boolean",
					"default": false,
					"description": "Use case sensitive comparison when performing filter operations."
				},
				"textPowerTools.defaultPadString": {
					"type": "string",
					"description": "Default pad string for the 'Pad start (left)' and 'Pad end (right)' functions."
				},
				"textPowerTools.insertUppercaseHexNumbers": {
					"type": "boolean",
					"default": true,
					"description": "Insert uppercase hex numbers when using the 'Insert hex number' and other numeric functions."
				},
				"textPowerTools.insertUppercaseGuids": {
					"type": "boolean",
					"default": false,
					"description": "Insert uppercase GUIDs when using the 'Generate a GUID' or 'Generate multiple GUIDs' functions."
				},
				"textPowerTools.defaultGuidType": {
					"type": "string",
					"default": "alwaysAsk",
					"enum": [
						"alwaysAsk",
						"noDashes",
						"dashes",
						"dashesAndBraces",
						"cSharpGuidConstructor"
					],
					"description": "Type of the GUIDs inserted when using the 'Generate a GUID' or 'Generate multiple GUIDs' functions. By default the method will ask the type of GUID you want to generate."
				},
				"textPowerTools.loremIpsum.wordsPerSentence.min": {
					"type": "number",
					"minimum": 1,
					"default": 4,
					"description": "Minimum number of words in a sentence in generated Lorem ipsum texts."
				},
				"textPowerTools.loremIpsum.wordsPerSentence.max": {
					"type": "number",
					"minimum": 1,
					"default": 16,
					"description": "Maximum number of words in a sentence in generated Lorem ipsum texts."
				},
				"textPowerTools.loremIpsum.sentencesPerParagraph.min": {
					"type": "number",
					"minimum": 1,
					"default": 4,
					"description": "Minimum number of sentences in a paragraph in generated Lorem ipsum texts."
				},
				"textPowerTools.loremIpsum.sentencesPerParagraph.max": {
					"type": "number",
					"minimum": 1,
					"default": 8,
					"description": "Maximum number of sentences in a paragraph in generated Lorem ipsum texts."
				},
				"textPowerTools.customLocale": {
					"type": "string",
					"description": "Custom locale (eg. `en-US`, `hu-HU`) to use instead of system locale when running date and time related comamnds."
				}
			}
		},
		"keybindings": [
			{
				"command": "textPowerTools.filterLinesIncludingString",
				"key": "ctrl+k g",
				"mac": "ctrl+k g",
				"when": "editorTextFocus"
			}
		]
	},
	"scripts": {
		"vscode:prepublish": "webpack --mode production --devtool hidden-source-map",
		"webpack": "webpack --mode development",
		"webpack-dev": "webpack --mode development --watch",
		"compile-web": "webpack",
		"watch-web": "webpack --watch",
		"test-compile": "tsc -p ./"
	},
	"devDependencies": {
		"@types/faker": "^5.1.5",
		"@types/ip6addr": "^0.2.1",
		"@types/js-roman-numerals": "^1.1.0",
		"@types/mocha": "^2.2.42",
		"@types/node": "^12.12.0",
		"@types/semver-sort": "^0.0.1",
		"@types/voca": "^1.4.0",
		"@types/vscode": "^1.32.0",
		"@typescript-eslint/eslint-plugin": "^4.31.1",
		"@typescript-eslint/parser": "^4.31.1",
		"eslint": "^7.32.0",
		"eslint-config-prettier": "^8.3.0",
		"eslint-plugin-prettier": "^4.0.0",
		"prettier": "2.4.1",
		"ts-loader": "^9.2.5",
		"typescript": "^4.6.2",
		"webpack": "^5.76.0",
		"webpack-cli": "^4.8.0"
	},
	"dependencies": {
		"@types/uuid": "^8.3.4",
		"assert": "^2.0.0",
		"buffer": "^6.0.3",
		"change-case": "^4.1.2",
		"crypto-browserify": "^3.12.0",
		"faker": "github:qcz/faker#v5.2.0-tpt-3",
		"html-entities": "2.3.2",
		"ip6addr": "^0.2.3",
		"js-base64": "^3.4.5",
		"js-roman-numerals": "^1.1.0",
		"lorem-ipsum": "^2.0.3",
		"no-case": "^3.0.4",
		"path-browserify": "^1.0.1",
		"path-case": "^3.0.4",
		"process": "^0.11.10",
		"semver-sort": "^0.0.4",
		"sponge-case": "^1.0.1",
		"stream-browserify": "^3.0.0",
		"swap-case": "^2.0.2",
		"title-case": "^3.0.3",
		"util": "^0.12.4",
		"uuid": "^8.3.2",
		"voca": "^1.4.0",
		"vscode-test": "^1.4.0",
		"zalgo-js": "^1.0.0"
	}
}
